// console.log(ordersBook)

import { Telegraf, Markup, Scenes } from 'telegraf'
import { message } from 'telegraf/filters'
import { binance } from 'ccxt'
import { API } from '3commas-typescript'
import * as dotenv from 'dotenv'
// import WebSocket from 'ws'
dotenv.config()
const bot = new Telegraf(process.env.TELEGRAF_TOKEN)

const api = new API({
  key: process.env.PUBLIC_KEY, // Optional if only query endpoints with no security requirement
  secrets: process.env.PRIVATE_KEY, // Optional
  timeout: 60000, // Optional, in ms, default to 30000
  forcedMode: 'real' | 'paper',
  errorHandler: (response, reject) => {
    // Optional, Custom handler for 3Commas error
    const { error, error_description } = response
    reject(new Error(error_description ?? error))
  },
})

// const wsServer = new WebSocket.Server({ port: 9000 })
// wsServer.on('connection', onConnect)
// const ticker = await exchange.fetchTicker('BTC/USDT')
// const orders = await exchange.fetchOrderBook('TON/USDT', 20)
// const ordersBook = {
//   ASKS: orders.asks.reverse(),
//   BIDS: orders.bids,
// }

const getBotDeals = async () => {
  const deals = await api.getDeals()
  console.log(deals)

  const dealsMap = deals.map((el) => {
    return {
      id: el.id,
      bot_name: el.bot_name,
      pair: el.pair,
      status: el.deal_has_error
        ? '–û—à–∏–±–∫–∞'
        : el.status === 'bought'
        ? '–ü—Ä–æ–¥–∞–∂–∞'
        : '–ü–æ–∫—É–ø–∫–∞',
      bought_average_price: +el.bought_average_price,
      bought_amount: el.bought_amount,
      bought_volume: el.bought_volume,
      to_currency: el.to_currency,
      from_currency: el.from_currency,
      created_at: el['finished?']
        ? '–ó–∞–∫—Ä—ã—Ç–∞'
        : `${el.created_at.split('T')[0]} // ${
            el.created_at.split('T')[1].split('.')[0]
          }`,
      closed_at: el['finished?']
        ? `${el.created_at.split('T')[0]} // ${
            el.created_at.split('T')[1].split('.')[0]
          }`
        : '–û—Ç–∫—Ä—ã—Ç–∞',
      failed_message: el.failed_message ? el.failed_message : '',
    }
  })
  return await dealsMap
}
const getBotStats = async () => {
  const stats = await api.getBotsStats()
  return await stats
}

const menu = Markup.keyboard([
  ['–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞'],
]).resize(true)

bot.start((ctx) => {
  api.subscribeDeal((data) => {
    const parse_data = JSON.parse(data)
    const bot_message = parse_data?.message
    if (bot_message?.type === 'Deal') {
      console.log(bot_message)
      ctx.reply(
        `\u{1F4B0} BOT: ${bot_message.bot_name}\nID —Å–¥–µ–ª–∫–∏: ${
          bot_message.id
        }\n–ü–∞—Ä–∞: ${bot_message.pair}\n\u{1F4B2}\u{1F4B2} –ü—Ä–æ—Ñ–∏—Ç: ${
          bot_message.usd_final_profit
        } USD\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${
          bot_message.localized_status === '–ê–∫—Ç–∏–≤–Ω–∞'
            ? '\u{2705} –ê–∫—Ç–∏–≤–Ω–∞'
            : '\u{274C} –ó–∞–∫—Ä—ã—Ç–∞'
        }\n–°–æ–∑–¥–∞–Ω–∞: ${bot_message.created_at?.split('T')[0]} // ${
          bot_message.created_at?.split('T')[1].split('.')[0]
        }\n–ó–∞–∫—Ä—ã—Ç–∞: ${bot_message.closed_at?.split('T')[0]} // ${
          bot_message.closed_at?.split('T')[1].split('.')[0]
        }\n–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${bot_message.bought_average_price.substr(0, 6)} ${
          bot_message.from_currency
        }\n–ö—É–ø–ª–µ–Ω–æ: ${bot_message.bought_amount} ${
          bot_message.to_currency
        }\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${bot_message.bought_volume} ${
          bot_message.from_currency
        }\n–°–û–û–ë–©–ï–ù–ò–Ø –ë–û–¢–ê:\n ${bot_message.bot_events.map(
          (el) =>
            `\n\n\u{2705} ${el.message} \n\u{231A} –î–∞—Ç–∞: ${
              el.created_at.split('T')[0]
            } // ${el.created_at.split('T')[1].split('.')[0]}`
        )}`,
        menu
      )
    }
  })
})
bot.help((ctx) => ctx.reply('Send me a sticker'))
bot.on(message('sticker'), (ctx) => ctx.reply('üëç'))

bot.hears('–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å', async (ctx) => {
  try {
    const exchange = new binance()
    const orderbook = await exchange.fetchOrderBook('TWT/BUSD', 20)
    const bid = orderbook.bids.length ? orderbook.bids[0][0] : undefined
    const ask = orderbook.asks.length ? orderbook.asks[0][0] : undefined
    const spread = bid && ask ? ask - bid : undefined
    const date = new Date()
    ctx.reply(
      ` \u{1F4B0}${exchange.id.toUpperCase()} -> —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ -> TWT/BUSD\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${new Intl.DateTimeFormat().format(
        date
      )}\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${`${date.getHours()}:${
        date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()
      }`}\n| –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ -> ${ask.toFixed(
        4
      )} \u{1F4B2} \n| –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ -> ${bid.toFixed(
        4
      )} \u{1F4B2} \n| –î–µ–ª—å—Ç–∞ -> ${spread.toFixed(4)} \u{1F4B2}`
    )
  } catch (e) {
    ctx.reply(` Something went wrong!`)
  }
})

bot.hears('–ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏', async (ctx) => {
  const botReply = await getBotDeals()

  botReply.forEach((el) => {
    if (el.status === '–û—à–∏–±–∫–∞') {
      ctx.reply(
        `\u{274C} id: ${el.id}\n–î–∞—Ç–∞ –≤—Ö–æ–¥–∞: ${el.created_at}\n–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: ${el.closed_at} \n${el.failed_message}`
      )
      return
    }
    ctx.reply(`\u{2705} id: ${el.id}\n–ò–º—è –±–æ—Ç–∞: ${el.bot_name}\n–ü–∞—Ä–∞: ${
      el.pair
    } \n–¢–∏–ø: ${el.status} \n–î–∞—Ç–∞ –≤—Ö–æ–¥–∞: ${el.created_at} \n–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: ${
      el.closed_at
    } \n–ö—É–ø–ª–µ–Ω–æ -> ${
      el.bought_amount + ` ${el.to_currency}`
    } –ø–æ —Ü–µ–Ω–µ ${el.bought_average_price.toFixed(4)} ${
      el.from_currency
    } \n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ -> ${el.bought_volume} ${el.from_currency}
    `)
  })
})
bot.hears('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', async (ctx) => {
  const statistic = await getBotStats()
  console.log(statistic)

  ctx.reply(`\u{1F4B9} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${
    statistic.overall_stats.BUSD
  } \u{1F4B2}\n\u{1F4B9} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${
    statistic.today_stats.BUSD
  } \u{1F4B2}\n\n–ü—Ä–æ—Ñ–∏—Ç –≤ USD: \n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è -> ${statistic.profits_in_usd.overall_usd_profit.toFixed(
    4
  )} \u{1F4B2}\n–ó–∞ —Å–µ–≥–æ–¥–Ω—è -> ${statistic.profits_in_usd.today_usd_profit.toFixed(
    4
  )} \u{1F4B2}\n–ü—Ä–æ—Ñ–∏—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö -> ${statistic.profits_in_usd.active_deals_usd_profit.toFixed(
    4
  )} \u{1F4B2}\n–°—Ä–µ–¥—Å—Ç–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö -> ${statistic.profits_in_usd.funds_locked_in_active_deals.toFixed(
    4
  )} \u{1F4B2}\n
    `)
})

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
